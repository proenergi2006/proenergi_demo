{"version":3,"sources":["./src/$_lazy_route_resource lazy","./src/app/angular-captcha/index.js","./src/app/angular-captcha/src/botdetect-captcha.module.ts","./src/app/angular-captcha/src/captcha-endpoint.pipe.ts","./src/app/angular-captcha/src/captcha-helper.service.ts","./src/app/angular-captcha/src/captcha.component.ts","./src/app/angular-captcha/src/captcha.service.ts","./src/app/angular-captcha/src/config.ts","./src/app/angular-captcha/src/correct-captcha.directive.ts","./src/app/app-routing.module.ts","./src/app/app.component.css","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/basic/basic.component.css","./src/app/basic/basic.component.html","./src/app/basic/basic.component.ts","./src/app/basic/basic.service.ts","./src/app/contact/contact.component.css","./src/app/contact/contact.component.html","./src/app/contact/contact.component.ts","./src/app/contact/contact.service.ts","./src/app/values.pipe.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/$$_lazy_route_resource lazy\n// module id = ./src/$$_lazy_route_resource lazy recursive\n// module chunks = main","export { BotDetectCaptchaModule } from './src/botdetect-captcha.module';\r\nexport { CaptchaComponent } from './src/captcha.component';\r\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/angular-captcha/index.js\n// module id = ./src/app/angular-captcha/index.js\n// module chunks = main","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { CaptchaComponent } from './captcha.component';\r\nimport { CaptchaService } from './captcha.service';\r\nimport { CaptchaHelperService } from './captcha-helper.service';\r\nimport { CorrectCaptchaDirective } from './correct-captcha.directive';\r\nimport { CaptchaEndpointPipe } from './captcha-endpoint.pipe';\r\nimport { CaptchaSettings } from './captcha-settings.interface';\r\nimport { CAPTCHA_SETTINGS } from './config';\r\n\r\n@NgModule({\r\n  imports: [\r\n    HttpClientModule\r\n  ],\r\n  declarations: [\r\n    CaptchaEndpointPipe,\r\n    CaptchaComponent,\r\n    CorrectCaptchaDirective\r\n  ],\r\n  exports: [\r\n    CaptchaComponent,\r\n    CorrectCaptchaDirective\r\n  ]\r\n})\r\nexport class BotDetectCaptchaModule {\r\n\r\n  static forRoot(config: CaptchaSettings): ModuleWithProviders {\r\n    return {\r\n      ngModule: BotDetectCaptchaModule,\r\n      providers: [provideBotDetectCaptcha(config)]\r\n    };\r\n  }\r\n\r\n  static forChild(config: CaptchaSettings): ModuleWithProviders {\r\n    return {\r\n      ngModule: BotDetectCaptchaModule,\r\n      providers: [provideBotDetectCaptcha(config)]\r\n    };\r\n  }\r\n}\r\n\r\nexport function provideBotDetectCaptcha(config: CaptchaSettings): any {\r\n  return [\r\n    {\r\n      provide: CAPTCHA_SETTINGS,\r\n      useValue: config\r\n    },\r\n    CaptchaEndpointPipe,\r\n    CaptchaService,\r\n    CaptchaHelperService\r\n  ];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/angular-captcha/src/botdetect-captcha.module.ts","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({name: 'captchaEndpoint'})\r\nexport class CaptchaEndpointPipe implements PipeTransform {\r\n\r\n  // Strip '/' character from the end of the given path.\r\n  transform(value: string): string {\r\n    return value.trim().replace(/\\/+$/g, '');\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/angular-captcha/src/captcha-endpoint.pipe.ts","import { Injectable, NgZone } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class CaptchaHelperService {\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private ngZone: NgZone\r\n  ) { }\r\n\r\n  // get script and execute it immediately\r\n  getScript(url: string): void {\r\n    this.http.get(url, { responseType: 'text' })\r\n      .subscribe(\r\n        scriptString => {\r\n          let f = new Function(scriptString);\r\n          this.ngZone.runOutsideAngular(() => {\r\n            f();\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  useUserInputBlurValidation(userInput: any): boolean {\r\n    return (userInput.getAttribute('correctCaptcha') !== null);\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/angular-captcha/src/captcha-helper.service.ts","import { Component, Input, OnInit, ElementRef } from '@angular/core';\r\n\r\nimport { CaptchaService } from './captcha.service';\r\nimport { CaptchaHelperService } from './captcha-helper.service';\r\n\r\n@Component({\r\n  selector: 'botdetect-captcha',\r\n  template: ''\r\n})\r\nexport class CaptchaComponent implements OnInit {\r\n\r\n  @Input() styleName: string;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    private captchaService: CaptchaService,\r\n    private captchaHelper: CaptchaHelperService\r\n  ) { }\r\n\r\n  // The current captcha id, which will be used for validation purpose.\r\n  get captchaId(): string {\r\n    return this.captchaService.botdetectInstance.captchaId;\r\n  }\r\n\r\n  // The typed captcha code value.\r\n  get captchaCode(): string {\r\n    return this.captchaService.botdetectInstance.userInput.value;\r\n  }\r\n\r\n  // Display captcha html markup on component initialization.\r\n  ngOnInit(): void {\r\n    // if styleName is not specified, the styleName will be 'defaultCaptcha'\r\n    if (!this.styleName) {\r\n      this.styleName = 'defaultCaptcha';\r\n    }\r\n\r\n    // set captcha style name to CaptchaService for creating BotDetect object\r\n    this.captchaService.styleName = this.styleName;\r\n\r\n    // display captcha html markup on view\r\n    this.displayHtml();\r\n  }\r\n\r\n  // Display captcha html markup in the <botdetect-captcha> tag.\r\n  displayHtml(): void {\r\n    this.captchaService.getHtml()\r\n      .subscribe(\r\n        (captchaHtml: string) => {\r\n          // display captcha html markup\r\n          this.elementRef.nativeElement.innerHTML = captchaHtml.replace(/<script.*<\\/script>/g, '');\r\n          // load botdetect scripts\r\n          this.loadScriptIncludes();\r\n        },\r\n        (error: any) => {\r\n          throw new Error(error);\r\n        });\r\n  }\r\n\r\n  // Reload a new captcha image.\r\n  reloadImage(): void {\r\n    this.captchaService.botdetectInstance.reloadImage();\r\n  }\r\n\r\n  // Validate captcha on client-side and execute user callback function on ajax success\r\n  validateUnsafe(callback: (isHuman: boolean) => void): void {\r\n    let userInput = this.captchaService.botdetectInstance.userInput;\r\n    let captchaCode = userInput.value;\r\n    if (captchaCode.length !== 0) {\r\n      this.captchaService.validateUnsafe(captchaCode)\r\n        .subscribe(\r\n          (isHuman: boolean) => {\r\n            callback(isHuman);\r\n            if (!this.captchaHelper.useUserInputBlurValidation(userInput) && !isHuman) {\r\n              console.log('a');\r\n              this.reloadImage();\r\n            }\r\n          },\r\n          (error: any) => {\r\n            throw new Error(error);\r\n          }\r\n        );\r\n    } else {\r\n      const isHuman = false;\r\n      callback(isHuman);\r\n    }\r\n  }\r\n\r\n  // Load BotDetect scripts.\r\n  loadScriptIncludes(): void {\r\n    let captchaId = this.elementRef.nativeElement.querySelector('#BDC_VCID_' + this.styleName).value;\r\n    const scriptIncludeUrl = this.captchaService.captchaEndpoint +  '?get=script-include&c=' + this.styleName + '&t=' + captchaId + '&cs=201';\r\n    this.captchaHelper.getScript(scriptIncludeUrl);\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/angular-captcha/src/captcha.component.ts","import { Injectable, Inject }    from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { CaptchaEndpointPipe } from './captcha-endpoint.pipe';\r\nimport { CaptchaSettings } from './captcha-settings.interface';\r\nimport { CAPTCHA_SETTINGS } from './config';\r\n\r\ndeclare var BotDetect: any;\r\n\r\n@Injectable()\r\nexport class CaptchaService {\r\n\r\n  private _styleName: string;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private captchaEndpointPipe: CaptchaEndpointPipe,\r\n    @Inject(CAPTCHA_SETTINGS) private config: CaptchaSettings\r\n  ) { }\r\n\r\n  set styleName(styleName: string) {\r\n    this._styleName = styleName;\r\n  }\r\n\r\n  get styleName(): string {\r\n    return this._styleName;\r\n  }\r\n\r\n  // The captcha endpoint for BotDetect requests.\r\n  get captchaEndpoint(): string {\r\n    return this.captchaEndpointPipe.transform(this.config.captchaEndpoint);\r\n  }\r\n\r\n  // Get BotDetect instance, which is provided by BotDetect script.\r\n  get botdetectInstance(): any {\r\n    if (!this.styleName) {\r\n      return null;\r\n    }\r\n    return BotDetect.getInstanceByStyleName(this.styleName);\r\n  }\r\n\r\n  // Get captcha html markup from BotDetect API.\r\n  getHtml(): any {\r\n    const url = this.captchaEndpoint + '?get=html&c=' + this.styleName;\r\n    return this.http.get(url, { responseType: 'text' });\r\n  }\r\n\r\n  // UI validate captcha.\r\n  validateUnsafe(captchaCode: string): any {\r\n    if (!this.botdetectInstance) {\r\n      throw new Error('BotDetect instance does not exist.');\r\n    }\r\n    const url = this.botdetectInstance.validationUrl + '&i=' + captchaCode;\r\n    return this.http.get(url);\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/angular-captcha/src/captcha.service.ts","import { InjectionToken } from '@angular/core';\r\nimport { CaptchaSettings } from './captcha-settings.interface';\r\n\r\nexport let CAPTCHA_SETTINGS = new InjectionToken<CaptchaSettings>('captcha.settings');\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/angular-captcha/src/config.ts","import { Directive, forwardRef, HostListener, Inject } from '@angular/core';\r\nimport { NG_ASYNC_VALIDATORS, AbstractControl, Validator } from '@angular/forms';\r\nimport { DOCUMENT } from '@angular/platform-browser';\r\n\r\nimport { CaptchaService } from './captcha.service';\r\n\r\n@Directive({\r\n  selector: '[correctCaptcha][formControlName],[correctCaptcha][formControl],[correctCaptcha][ngModel]',\r\n  providers: [\r\n    {\r\n      provide: NG_ASYNC_VALIDATORS,\r\n      useExisting: forwardRef(() => CorrectCaptchaDirective),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class CorrectCaptchaDirective implements Validator {\r\n\r\n  // Cached captcha input control.\r\n  control: AbstractControl;\r\n\r\n  constructor(\r\n    @Inject(DOCUMENT) private document: any,\r\n    private captchaService: CaptchaService\r\n  ) { }\r\n\r\n  validate(c: AbstractControl, onBlur?: boolean) {\r\n    if (c) {\r\n      // cache the control for using on blur\r\n      this.control = c;\r\n    }\r\n\r\n    return new Promise((resolve: any) => {\r\n      // the control should have incorrect status first\r\n      resolve({ incorrectCaptcha: true });\r\n\r\n      // we only validate the captcha on blur\r\n      if (onBlur) {\r\n        let userInputID = this.captchaService.botdetectInstance.options.userInputID;\r\n        let captchaCode = this.document.getElementById(userInputID).value;\r\n\r\n        if (captchaCode) {\r\n          this.captchaService.validateUnsafe(captchaCode)\r\n            .subscribe(\r\n              (isHuman: boolean) => {\r\n                if (!isHuman) {\r\n                  // ui captcha validation failed\r\n                  this.captchaService.botdetectInstance.reloadImage();\r\n                  this.control = null;\r\n                } else {\r\n                  // ui captcha validation passed\r\n                  this.control.setErrors(null);\r\n                }\r\n              },\r\n              (error: any) => {\r\n                throw new Error(error);\r\n              }\r\n            );\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  @HostListener('blur') onBlur() {\r\n    this.validate(undefined, true);\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/angular-captcha/src/correct-captcha.directive.ts","import { NgModule }             from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { BasicComponent }   from './basic/basic.component';\r\nimport { ContactComponent }   from './contact/contact.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: '/basic', pathMatch: 'full' },\r\n  { path: 'basic',  component: BasicComponent },\r\n  { path: 'contact',  component: ContactComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [ RouterModule.forRoot(routes, { useHash: true } ) ],\r\n  exports: [ RouterModule ]\r\n})\r\nexport class AppRoutingModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app-routing.module.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.css\n// module id = ./src/app/app.component.css\n// module chunks = main","module.exports = \"<header>\\r\\n  <div class=\\\"header-content\\\"><h1>BotDetect Angular CAPTCHA Examples</h1></div>\\r\\n</header>\\r\\n\\r\\n<nav>\\r\\n  <ul class=\\\"nav\\\">\\r\\n    <li><a routerLink=\\\"/basic\\\" routerLinkActive=\\\"active\\\">Basic Example</a></li>\\r\\n    <li><a routerLink=\\\"/contact\\\" routerLinkActive=\\\"active\\\">Contact Example</a></li>\\r\\n  </ul>\\r\\n</nav>\\r\\n\\r\\n<section id=\\\"main-content\\\">\\r\\n  <router-outlet></router-outlet>\\r\\n</section>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = ./src/app/app.component.html\n// module chunks = main","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'app works!';\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpModule } from '@angular/http';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { BotDetectCaptchaModule } from './angular-captcha';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { BasicComponent }   from './basic/basic.component';\r\nimport { ContactComponent }   from './contact/contact.component';\r\n\r\nimport { ValuesPipe } from './values.pipe';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    BasicComponent,\r\n    ContactComponent,\r\n    ValuesPipe\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpModule,\r\n    ReactiveFormsModule,\r\n    AppRoutingModule,\r\n    BotDetectCaptchaModule.forRoot({\r\n      captchaEndpoint: 'captcha-endpoint/simple-botdetect.php',\r\n    })\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","module.exports = \"label {\\r\\n  display: block;\\r\\n  margin-bottom: 5px;\\r\\n  margin-top: 10px;\\r\\n}\\r\\n\\r\\nlabel span {\\r\\n  display: block;\\r\\n  margin-bottom: 3px;\\r\\n  font-weight: bold;\\r\\n  font-size: 12px;\\r\\n}\\r\\n\\r\\ninput[type=\\\"text\\\"],\\r\\ninput[type=\\\"email\\\"] {\\r\\n  width: 261px;\\r\\n  height: 25px;\\r\\n  padding: 0 5px;\\r\\n}\\r\\n\\r\\n.alert {\\r\\n  padding: 5px;\\r\\n  margin-bottom: 10px;\\r\\n  font-size: 12px;\\r\\n}\\r\\n\\r\\n.alert-success {\\r\\n  background: #5db95d;\\r\\n  color: #fff;\\r\\n  border: 1px solid #4e974e;\\r\\n}\\r\\n\\r\\n.alert-error {\\r\\n  background: #db4f4a;\\r\\n  color: #fff;\\r\\n  border: 1px solid #b0352f;\\r\\n}\\r\\n\\r\\n.error {\\r\\n  color: red;\\r\\n  font-size: 12px;\\r\\n}\\r\\n\\r\\nbutton {\\r\\n  margin-top: 10px;\\r\\n}\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/basic/basic.component.css\n// module id = ./src/app/basic/basic.component.css\n// module chunks = main","module.exports = \"<form novalidate #f=\\\"ngForm\\\" (ngSubmit)=\\\"validate(f.value, f.valid)\\\">\\r\\n\\r\\n  <div class=\\\"alert alert-success\\\" *ngIf=\\\"successMessages\\\">\\r\\n    {{ successMessages }}\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"alert alert-error\\\" *ngIf=\\\"errorMessages\\\">\\r\\n    {{ errorMessages }}\\r\\n  </div>\\r\\n\\r\\n  <!-- show captcha html -->\\r\\n  <botdetect-captcha styleName=\\\"angularBasicCaptcha\\\"></botdetect-captcha>  \\r\\n\\r\\n  <label>\\r\\n    <span>Retype the characters from the picture:</span>\\r\\n    <input\\r\\n      type=\\\"text\\\"\\r\\n      id=\\\"captchaCode\\\"\\r\\n      name=\\\"captchaCode\\\"\\r\\n      ngModel\\r\\n      #captchaCode=\\\"ngModel\\\"  \\r\\n    >\\r\\n  </label>\\r\\n\\r\\n  <button type=\\\"submit\\\">Validate</button>\\r\\n</form>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/basic/basic.component.html\n// module id = ./src/app/basic/basic.component.html\n// module chunks = main","import { Component, ViewChild } from '@angular/core';\r\nimport { Observable } from 'rxjs/Rx';\r\n\r\nimport { CaptchaComponent } from '../angular-captcha';\r\n\r\nimport { BasicService } from './basic.service';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'basic-form',\r\n  templateUrl: 'basic.component.html',\r\n  styleUrls: ['basic.component.css'],\r\n  providers: [BasicService]\r\n})\r\nexport class BasicComponent {\r\n\r\n  /**\r\n   * Captcha validation messages.\r\n   */\r\n  errorMessages: string;\r\n  successMessages: string;\r\n\r\n  /**\r\n   * BotDetect CAPTCHA component.\r\n   */\r\n  @ViewChild(CaptchaComponent) captchaComponent: CaptchaComponent;\r\n\r\n  constructor(private basicService: BasicService) { }\r\n\r\n  /**\r\n   * Validate captcha at server-side.\r\n   */\r\n  validate(value, valid): void {\r\n    // use validateUnsafe() method to perform client-side captcha validation\r\n    this.captchaComponent.validateUnsafe((isCaptchaCodeCorrect: boolean) => {\r\n\r\n      if (isCaptchaCodeCorrect) {\r\n\r\n        // after UI form validation passed, \r\n        // we will need to validate captcha at server-side once before we save form data in database, etc.\r\n\r\n        const postData = {\r\n          captchaCode: this.captchaComponent.captchaCode,\r\n          captchaId: this.captchaComponent.captchaId\r\n        };\r\n      \r\n        this.basicService.send(postData)\r\n          .subscribe(\r\n            response => {\r\n              if (response.success) {\r\n                // captcha, other form data passed and the data is also stored in database\r\n                this.successMessages = 'Your message was sent successfully!';\r\n                this.errorMessages = '';\r\n              } else {\r\n                // captcha validation failed at server-side\r\n                this.errorMessages = 'CAPTCHA validation falied.';\r\n                this.successMessages = '';\r\n              }\r\n\r\n              // always reload captcha image after validating captcha at server-side \r\n              // in order to update new captcha code for current captcha id\r\n              this.captchaComponent.reloadImage();\r\n            },\r\n            error => {\r\n              throw new Error(error);\r\n            });\r\n      } else {\r\n        this.errorMessages = 'CAPTCHA validation falied.';\r\n        this.successMessages = '';\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/basic/basic.component.ts","import { Injectable }    from '@angular/core';\r\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\r\n\r\nimport { Observable } from 'rxjs/Rx';\r\n\r\n@Injectable()\r\nexport class BasicService {\r\n\r\n  // basic api url\r\n  basicUrl = 'basic.php';\r\n\r\n  constructor(private http: Http) { }\r\n\r\n  send(data: Object): Observable<any> {\r\n    const headers = new Headers({ 'Content-Type': 'application/json' });\r\n    const options = new RequestOptions({ headers: headers });\r\n\r\n    return this.http.post(this.basicUrl, data, options)\r\n      .map((response: Response) => response.json())\r\n      .catch((error:any) => Observable.throw(error.json().error));\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/basic/basic.service.ts","module.exports = \"label {\\r\\n  display: block;\\r\\n  margin-bottom: 5px;\\r\\n  margin-top: 10px;\\r\\n}\\r\\n\\r\\nlabel span {\\r\\n  display: block;\\r\\n  margin-bottom: 3px;\\r\\n  font-weight: bold;\\r\\n  font-size: 12px;\\r\\n}\\r\\n\\r\\ninput[type=\\\"text\\\"],\\r\\ninput[type=\\\"email\\\"] {\\r\\n  width: 261px;\\r\\n  height: 25px;\\r\\n  padding: 0 5px;\\r\\n}\\r\\n\\r\\ntextarea {\\r\\n  width: 269px;\\r\\n  height: 50px;\\r\\n}\\r\\n\\r\\n.textarea-error {\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n.alert {\\r\\n  padding: 5px;\\r\\n  margin-bottom: 10px;\\r\\n  font-size: 12px;\\r\\n}\\r\\n\\r\\n.alert-success {\\r\\n  background: #5db95d;\\r\\n  color: #fff;\\r\\n  border: 1px solid #4e974e;\\r\\n}\\r\\n\\r\\n.alert-error {\\r\\n  background: #db4f4a;\\r\\n  color: #fff;\\r\\n  border: 1px solid #b0352f;\\r\\n}\\r\\n\\r\\n.error {\\r\\n  color: red;\\r\\n  font-size: 12px;\\r\\n}\\r\\n\\r\\n.list-messages {\\r\\n  margin: 0; padding: 0;\\r\\n}\\r\\n\\r\\nbutton {\\r\\n  margin-top: 10px;\\r\\n}\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/contact/contact.component.css\n// module id = ./src/app/contact/contact.component.css\n// module chunks = main","module.exports = \"<form novalidate (ngSubmit)=\\\"send(contact)\\\" [formGroup]=\\\"contact\\\">\\r\\n\\r\\n  <div class=\\\"alert alert-success\\\" *ngIf=\\\"successMessages\\\">\\r\\n    {{ successMessages }}\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"alert alert-error\\\" *ngIf=\\\"errorMessages\\\">\\r\\n    <ul class=\\\"list-messages\\\">\\r\\n      <li *ngFor=\\\"let error of errorMessages | values\\\">\\r\\n        {{ error }}\\r\\n      </li>\\r\\n    </ul>\\r\\n  </div>\\r\\n\\r\\n  <label>\\r\\n    <span>Name:</span>\\r\\n    <input\\r\\n      type=\\\"text\\\"\\r\\n      name=\\\"name\\\"\\r\\n      formControlName=\\\"name\\\">\\r\\n  </label>\\r\\n\\r\\n  <div\\r\\n    class=\\\"error\\\"\\r\\n    *ngIf=\\\"contact.get('name').hasError('minlength') && contact.get('name').touched\\\"\\r\\n    >\\r\\n    Name must be at least 3 characters.\\r\\n  </div>\\r\\n\\r\\n\\r\\n  <label>\\r\\n    <span>Email:</span>\\r\\n    <input\\r\\n      type=\\\"email\\\"\\r\\n      name=\\\"email\\\"\\r\\n      formControlName=\\\"email\\\">\\r\\n  </label>\\r\\n\\r\\n  <div\\r\\n    class=\\\"error\\\"\\r\\n    *ngIf=\\\"contact.get('email').hasError('pattern') && contact.get('email').touched\\\"\\r\\n    >\\r\\n    Email is invalid.\\r\\n  </div>\\r\\n\\r\\n\\r\\n  <label>\\r\\n    <span>Subject:</span>\\r\\n    <input\\r\\n      type=\\\"text\\\"\\r\\n      name=\\\"subject\\\"\\r\\n      formControlName=\\\"subject\\\">\\r\\n  </label>\\r\\n\\r\\n  <div\\r\\n    class=\\\"error\\\"\\r\\n    *ngIf=\\\"contact.get('subject').hasError('minlength') && contact.get('subject').touched\\\"\\r\\n    >\\r\\n    Subject must be at least 10 characters.\\r\\n  </div>\\r\\n\\r\\n\\r\\n  <label>\\r\\n    <span>Message:</span>\\r\\n    <textarea\\r\\n      name=\\\"message\\\"\\r\\n      formControlName=\\\"message\\\"></textarea>\\r\\n  </label>\\r\\n\\r\\n  <div\\r\\n    class=\\\"error textarea-error\\\"\\r\\n    *ngIf=\\\"contact.get('message').hasError('minlength') && contact.get('message').touched\\\"\\r\\n    >\\r\\n    Message must be at least 10 characters.\\r\\n  </div>\\r\\n  \\r\\n  <!-- show captcha html -->\\r\\n  <botdetect-captcha styleName=\\\"angularFormCaptcha\\\"></botdetect-captcha>\\r\\n\\r\\n  <label>\\r\\n    <span>Retype the characters from the picture:</span>\\r\\n    <input\\r\\n      type=\\\"text\\\"\\r\\n      id=\\\"captchaCode\\\"\\r\\n      name=\\\"captchaCode\\\"\\r\\n      formControlName=\\\"captchaCode\\\"\\r\\n    >\\r\\n  </label>\\r\\n\\r\\n\\r\\n  <button type=\\\"submit\\\">Send</button>\\r\\n</form>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/contact/contact.component.html\n// module id = ./src/app/contact/contact.component.html\n// module chunks = main","import { Component, ViewChild, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Observable } from 'rxjs/Rx';\r\n\r\nimport { CaptchaComponent } from '../angular-captcha';\r\n\r\nimport { Contact } from './contact.interface';\r\nimport { ContactService } from './contact.service';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'contact-form',\r\n  templateUrl: 'contact.component.html',\r\n  styleUrls: ['contact.component.css'],\r\n  providers: [ContactService]\r\n})\r\nexport class ContactComponent implements OnInit {\r\n  \r\n  contact: FormGroup;\r\n\r\n  emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n  /**\r\n   * Captcha validation messages.\r\n   */\r\n  errorMessages: Object;\r\n  successMessages: string;\r\n\r\n  /**\r\n   * BotDetect CAPTCHA component.\r\n   */\r\n  @ViewChild(CaptchaComponent) captchaComponent: CaptchaComponent;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private contactService: ContactService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.contact = this.fb.group({\r\n      name: ['', [Validators.required, Validators.minLength(3)]],\r\n      email: ['',  [Validators.required, Validators.pattern(this.emailRegex)]],\r\n      subject: ['',  [Validators.required,Validators.minLength(10)]],\r\n      message: ['',  [Validators.required,Validators.minLength(10)]],\r\n      captchaCode: [''] // we use 'validateUnsafe' method to validate captcha code control when form is submitted\r\n    });\r\n  }\r\n\r\n  send({ value }: { value: Contact }): void {\r\n\r\n    // use validateUnsafe() method to perform client-side captcha validation\r\n    this.captchaComponent.validateUnsafe((isCaptchaCodeCorrect: boolean) => {\r\n\r\n      if (isCaptchaCodeCorrect && this.contact.controls.name.valid && this.contact.controls.email.valid\r\n            && this.contact.controls.subject.valid && this.contact.controls.message.valid) {\r\n\r\n        // form is valid\r\n        // we send contact data as well as captcha data to server-side for\r\n        // validating once again before they are inserted into database\r\n\r\n        let postData = {\r\n          name: value.name,\r\n          email: value.email,\r\n          subject: value.subject,\r\n          message: value.message,\r\n          captchaCode: this.captchaComponent.captchaCode,\r\n          captchaId: this.captchaComponent.captchaId\r\n        };\r\n    \r\n        this.contactService.send(postData)\r\n          .subscribe(\r\n            response => {\r\n              if (response.success) {\r\n                // captcha validation passed at server-side\r\n                this.successMessages = 'CAPTCHA validation passed.';\r\n                this.errorMessages = null;\r\n              } else {\r\n                // captcha validation failed at server-side\r\n                this.errorMessages = response.errors;\r\n                this.successMessages = '';\r\n              }\r\n    \r\n              // always reload captcha image after validating captcha at server-side \r\n              // in order to update new captcha code for current captcha id\r\n              this.captchaComponent.reloadImage();\r\n            },\r\n            error => {\r\n              throw new Error(error);\r\n            });\r\n            \r\n      } else {\r\n        this.errorMessages = { formInvalid: 'Please enter valid values.' }\r\n        this.successMessages = '';\r\n      }\r\n    });\r\n\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/contact/contact.component.ts","import { Injectable }    from '@angular/core';\r\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\r\n\r\nimport { Observable } from 'rxjs/Rx';\r\n\r\n@Injectable()\r\nexport class ContactService {\r\n\r\n  // contact api url\r\n  contactUrl = 'contact.php';\r\n\r\n  constructor(private http: Http) { }\r\n\r\n  send(data: Object): Observable<any> {\r\n    const headers = new Headers({ 'Content-Type': 'application/json' });\r\n    const options = new RequestOptions({ headers: headers });\r\n\r\n    return this.http.post(this.contactUrl, data, options)\r\n      .map((response: Response) => response.json())\r\n      .catch((error:any) => Observable.throw(error.json().error));\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/contact/contact.service.ts","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'values' })\r\nexport class ValuesPipe implements PipeTransform {\r\n  transform(value: any): any {\r\n    return Object.keys(value).map(key => value[key]);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/values.pipe.ts","export const environment = {\r\n  production: true\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts"],"sourceRoot":"webpack:///"}